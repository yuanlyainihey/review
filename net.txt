OSI模型：
物理层
数据链路层
网络层
传输层
会话层
表示层
应用层

TCP/IP分别在模型的哪一层：TCP在传输层，IP在网络层

socket长连接和短链接：
    长连接：1 次 socket 连接后，不管是否使用 socket 连接（进行多次 HTTP 事务），不断开 socket 连接。
    长连接：指在一个TCP连接上可以连续发送多个数据包，在TCP连接保持期间，如果没有数据包发送，需要双方发检测包以维持此连接，一般需要自己做在线维持。安全性较差。
    短连接：1 次 socket 连接后，只进行 1 次 HTTP 事务，然后断开 socket 连接。
    短连接：是指通信双方有数据交互时，就建立一个TCP连接，数据发送完成后，则断开此TCP连接。
    短链接频繁通信会造成socket错误，频繁的socket创建会对资源造成浪费

select、poll、epoll的区别：
    都是同步多路IO复用的机制。
    select 和 poll 实际上是水平触发模式，而 epoll 不仅支持水平触发，而且可以设置为边沿触发。
    select： 单个进程就可以同时处理多个网络连接的io请求（同时阻塞多个io操作）。时间复杂度为n
             缺点：单进程可以打开fd有限制；对socket进行扫描时是线性扫描，即采用轮询的方法，效率较低；用户空间和内核空间的复制非常消耗资源；
    poll：采用链表的方式替换原有fd_set数据结构,而使其没有连接数的限制。时间复杂度为n
    epoll：时间复杂度为1
    epoll的两种工作方式：1.水平触发（LT）2.边缘触发（ET） 
    LT模式：若就绪的事件一次没有处理完要做的事件，就会一直去处理。即就会将没有处理完的事件继续放回到就绪队列之中（即那个内核中的链表），一直进行处理。ET模式：就绪的事件只能处理一次，若没有处理完会在下次的其它事件就绪时再进行处理。而若以后再也没有就绪的事件，那么剩余的那部分数据也会随之而丢失。由此可见：ET模式的效率比LT模式的效率要高很多。只是如果使用ET模式，就要保证每次进行数据处理时，要将其处理完，不能造成数据丢失，这样对编写代码的人要求就比较高。 

TCP和UDP的区别：
    1.TCP面向连接；UDP是无连接的,即发送数据之前不需要建立连接
    2.TCP提供可靠的服务，也就是说,通过TCP连接传送的数据,无差错,不丢失,不重复,且按序到达；UDP尽最大努力交付,即不保 证可靠交付
    3.TCP面向字节流,实际上是TCP把数据看成一连串无结构的字节流；UDP是面向报文的UDP没有拥塞控制,因此网络出现拥塞不会使源主机的发送速率降低
    4.每一条TCP连接只能是点到点的；UDP支持一对一,一对多,多对一和多对多的交互通信
    5.TCP首部开销20字节；UDP的首部开销小,只有8个字节
    6.TCP的逻辑通信信道是全双工的可靠信道,UDP则是不可靠信道
关于分包和粘包
粘包：发送方发送两个字符串”hello”+”world”,接收方却一次性接收到了”helloworld”.
分包：发送方发送字符串”helloworld”,接收方却接收到了两个字符串”hello”和”world”.
TCP为什么会分包：
    TCP是以段（Segment）为单位发送数据的,建立TCP链接后,有一个最大消息长度（MSS）.如果应用层数据包超过MSS,就会把应用层数据包拆分,分成两个段来发送.这个时候接收端的应用层就要拼接这两个TCP包,才能正确处理数据.
TCP为什么会粘包：
    有时候,TCP为了提高网络的利用率,会使用一个叫做Nagle的算法.该算法是指,发送端即使有要发送的数据,如果很少的话,会延迟发送.如果应用层给TCP传送数据很快的话,就会把两个应用层数据包“粘”在一起,TCP最后只发一个TCP数据包给接收端.
如何处理：
    在进行TCP Socket开发时,都需要处理数据包粘包和分包的情况.使用的语言是Python.实际上解决该问题很简单,在应用层下,定义一个协议：消息头部+消息长度+消息正文即可.

三次握手四次挥手：
    三次握手:
        1.客户端向服务器发起链接请求(问是否可以连接)
        2.服务器接受到请求后进行确认(允许连接)返回报文
        3.客户端收到许可,建立连接
    四次挥手:
        1.主动方发送报文告知被动方要断开连接
        2.被动发返回报文没告知收到请求,准备断开
        3.被动发发送报文给主动方告知准备就绪可以断开
        4.主动方发送报文确定断开

TIME_WAIT过多是因为什么：
    概念：  通信双方建立TCP连接后，主动关闭连接的一方就会进入TIME_WAIT状态。
            客户端主动关闭连接时，会发送最后一个ack后，然后会进入TIME_WAIT状态，再停留2个MSL时间(后有MSL的解释)，进入CLOSED状态。
    原因：  对于一个处理大量短连接的服务器，如果是由服务器主动关闭客户端的连接，将导致服务器存在大量的处于TIME_WAIT状态的socket，严重影响服务器的处理能力，甚至耗尽可用的socket。
    解决：  修改参数TcpTimedWaitDelay，缩短 TIME_WAIT 的等待时间。

http一次连接的全过程，从用户发起request——到用户接收到response：
    域名解析->发起TCP三次握手->建立TCP连接后发起HTTP请求->服务器响应HTTP请求，浏览器得到HTML代码->浏览器解析HTML代码，并请求HTML代码中的资源(js/css/img)->浏览器对页面进行渲染呈现给用户

http连接方式，get和post的区别，其他方式：
    http连接方式：短链接，长连接（connection:keep-alive）
    get：从服务器获取数据；post：向服务器传送数据
    在客户端，get方式通过URL提交数据，数据在URL中可见；post方式，数据放置在HTML header内提交
    对于get方式，服务器端用request.QueryString获取变量值
    对于post方式，服务器端用request.Form获取提交的数据
    get方式提交数据会带来安全问题，比如登录页面通过get方式提交数据时，用户名密码会出现在url上，历史记录可以获取此信息，因此提交表单用POST方法

Http和Https的区别？
　　超文本传输协议HTTP协议被用于在Web浏览器和网站服务器之间传递信息，HTTP协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此，HTTP协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。
　　为了解决HTTP协议的这一缺陷，需要使用另一种协议：安全套接字层超文本传输协议HTTPS，为了数据传输的安全，HTTPS在HTTP的基础上加入了SSL协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。

状态码：
    200：操作成功               301：永久重定向                 302：暂时重定向
    403：访问受限or授权过期      404：资源、服务器未找到         504：网关超时

RPC：远程过程调用，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。RPC协议假定某些传输协议的存在，如TCP或UDP，为通信程序之间携带信息数据。在OSI网络通信模型中，RPC跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。