类视图：定义一个类，里面封装get和post方法，其他模块想要使用，直接调用继承这个类视图，可重写

MVC：模型(Model)、视图(View)和控制器(Controller)
Model：负责业务对象与数据库的映射(ORM)
View：负责与用户的交互
Control：接受用户的输入调用模型和视图完成用户的请求

Django框架MTV：模型(Model)、模板(Template)和视图(View)
Model：负责业务对象与数据库的对象(ORM)
Template：负责如何把页面展示给用户
View：负责业务逻辑，并在适当的时候调用Model和Template
此外,Django还有一个urls分发器,它将一个个URL的页面请求分发给不同的view处理,view再调用相应的Model和Template

ORM框架：
　　对象关系映射，通过创建一个类，这个类与数据库的表相对应类的对象代指数据库中的一行数据。
简述ORM原理：
　　让用户不再写SQL语句，而是通过类以及对象的方式，和其内部提供的方法，进行数据库操作！把用户输入的类或对象转换成SQL语句，转换之后通过pymysql执行完成数据库的操作。


django的内置组件：
1.Admin是对model中对应的数据表进行增删改查提供的组件
2.model组件：负责操作数据库
3.form组件：1.生成HTML代码；2.数据有效性校验；3.校验信息返回并展示
4.ModelForm组件即用于数据库操作,也可用于用户请求的验证

 django请求的生命周期？
a. wsgi, 创建socket服务端，用于接收用户请求并对请求进行初次封装。
b. 中间件，对所有请求到来之前，响应之前定制一些操作。
c. 路由匹配，在url和视图函数对应关系中，根据当前请求url找到相应的函数。
d. 执行视图函数，业务处理【通过ORM去数据库中获取数据，再去拿到模板，然后将数据和模板进行渲染】
e. 再经过所有中间件。
f. 通过wsgi将响应返回给用户。

简述什么是FBV（function base views）CBV（class base views）？
    1. FBV方式请求的过程
    用户发送url请求,Django会依次遍历路由映射表中的所有记录,一旦路由映射表其中的一条匹配成功了,就执行视图函数中对应的函数名
    2. CBV方式请求的过程
    当服务端使用CBV模式的时候,用户发给服务端的请求包含url和method,这两个信息都是字符串类型，服务端通过路由映射表匹配成功后会自动去找dispatch方法,然后Django会通过dispatch反射的方式找到类中对应的方法并执行；类中的方法执行完毕之后,会把客户端想要的数据返回给dispatch方法,由dispatch方法把数据返回经客户端

django的request对象是在什么时候创建的？
    当请求一个页面时, Django会建立一个包含请求元数据的 HttpRequest 对象. 当Django 加载对应的视图时, HttpRequest对象将作为视图函数的第一个参数. 每个视图会返回一个HttpResponse对象.

中间件是介于request与response处理之间的一道处理过程,用于在全局范围内改变Django的输入和输出。简单的来说中间件是帮助我们在视图函数执行之前和执行之后都可以做一些额外的操作。
Django 在中间件中预置了六个方法，这六个方法的区别在于不同的阶段执行，对输入或输出进行干预。
1.初始化：无需任何参数，服务器响应第一个请求的时候调用一次，用于确定是否启用当前中间件。def init() | pass
2.处理请求前：在每个请求上调用，返回 None 或 HttpResponse 对象。def process_request(request) | pass
3.处理视图前：在每个请求上调用，返回 None 或 HttpResponse 对象。def process_view(request, view_func, view_args, view_kwargs) | pass
4.处理模板响应前：在每个请求上调用，返回实现了 render 方法的响应对象。def process_template_response(request, " response) | pass
5.处理响应后：所有响应返回浏览器之前被调用，在每个请求上调用，返回 HttpResponse 对象。def process_response(request, " response) | pass
6.异常处理：当视图抛出异常时调用，在每个请求上调用，返回一个 HttpResponse 对象。def process_exception(request,exception) | pass”
example：
1）Django项目中默认启用了csrf保护,每次请求时通过CSRF中间件检查请求中是否有正确#token值
2）当用户在页面上发送请求时，通过自定义的认证中间件，判断用户是否已经登陆，未登陆就去登陆
3）当有用户请求过来时，判断用户是否在白名单或者在黑名单里

重定向：
1.使用HttpResponseRedirect
2.使用redirect和reverse
状态码301和302的区别：
相同点：都表示重定向，浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的URL地址
不同点：
301比较常用的场景是使用域名跳转。用来做永久重定向
302用来做临时跳转，表示旧地址A资源还在（仍然可以访问），这个重定向只是临时地从旧地址A跳转到地址B

XSS攻击是向网页中注入恶意脚本，用在用户浏览网页时，在用户浏览器中执行恶意脚本的攻击。XSS分类，反射型xss ，存储型xss
反射型xss又称为非持久型xss，攻击者通过电子邮件等方式将包含注入脚本的链接发送给受害者，受害者通过点击链接，执行注入脚本，达到攻击目的。
持久型xss跟反射型的最大不同是攻击脚本将被永久的存放在目标服务器的数据库和文件中，多见于论坛，攻击脚本连同正常信息一同注入到帖子内容当中，当浏览这个被注入恶意脚本的帖子的时候，恶意脚本会被执行
防范措施：
1，输入过滤 用户输入进行检测 不允许带有js代码
2，输出编码 就是把我们的脚本代码变成字符串形式输出出来
3，cookie加密
XSS攻击能做些什么：
1.窃取cookies
2.读取用户未公开的资料，如果：邮件列表或者内容、系统的客户资料，联系人列表
#解决方法:
1.客户度端：表单提交之前或者url传递之前,对需要的参数进行过滤
2.服务器端：检查用户输入的内容是否有非法内容

django中csrf的实现机制
1.django第一次响应来自某个客户端的请求时,后端随机产生一个token值，把这个token保存在SESSION中;同时,后端把这个token放到cookie中交给前端页面；
2.下次前端需要发起请求（比如发帖）的时候把这个token值加入到请求数据或者头信息中,一起传给后端；Cookies:{csrftoken:xxxxx}
3.后端校验前端请求带过来的token和SESSION里的token是否一致；

csrf是什么？如何防范？
    csrf成为跨站伪造请求， 利用用户信任过的网站去执行一些恶意的操作
    如何防范：
    1.检查Referer字段， 严格要求该字段只来自于信任的URL
    2.添加校验token，将token值附加在表单中，攻击者是无法获取这个字， 服务端进行检查发现该值为空时将会拒绝服务。

基于django使用ajax发送post请求时，都可以使用哪种方法携带csrf token？
1.后端将csrftoken传到前端，发送post请求时携带这个值发送data: {csrfmiddlewaretoken: '{{ csrf_token }}' }
2.获取form中隐藏标签的csrftoken值，加入到请求数据中传给后端 data: {csrfmiddlewaretoken:$('[name="csrfmiddlewaretoken"]').val()},
3.cookie中存在csrftoken,将csrftoken值放到请求头中headers:{ "X-CSRFtoken":$.cookie("csrftoken")}，

什么是wsgi？
    Python Web服务器网关接口（Python Web Server Gateway Interface，缩写为WSGI)是Python应用程序或框架和Web服务器之间的一种接口，已经被广泛接受, 它已基本达成它的可移植性方面的目标。

1.cookie:cookie是保存在浏览器端的键值对,可以用来做用户认证
2.session：将用户的会话信息保存在服务端,key值是随机产生的自符串,value值时session的内容依赖于cookie将每个用户的随机字符串保存到用户浏览器上
Django中session默认保存在数据库中：django_session表
flask,session默认将加密的数据写在用户的cookie中

django rest framework框架的认证流程
1.用户请求走进来后,走APIView,初始化了默认的认证方法
2.走到APIView的dispatch方法,initial方法调用了request.user
3.如果我们配置了认证类,走我们自己认证类中的authentication方法

django rest framework如何实现的用户访问频率控制
使用IP/用户账号作为键，每次的访问时间戳作为值，构造一个字典形式的数据，存起来，每次访问时对时间戳列表的元素进行判断，把超时的删掉，再计算列表剩余的元素数就能做到频率限制了 
匿名用户：使用IP控制，但是无法完全控制，因为用户可以换代理IP登录用户：使用账号控制，但是如果有很多账号，也无法限制

1.pv:页面访问量,每打开一次页面PV计算+1,页面刷新也是
2.UV：独立访问数,一台电脑终端为一个访客

同源策略：1.协议相同；2.域名相同；3.端口相同
跨域：浏览器从一个域名的网页去请求另一个域名的资源时,浏览器处于安全的考虑,不允许不同源的请求
处理方法：
1.通过JSONP跨域：script标签不受同源策略的影响，手动创建一个script标签,传递URL,同时传入一个回调函数的名字；服务器得到名字后,返回数据时会用这个函数名来包裹住数据,客户端获取到数据之后，立即把script标签删掉
2.cors：跨域资源共享：使用自定义的HTTP头部允许浏览器和服务器相互通信
1）如果是简单请求,直接设置允许访问的域名
2）如果是复杂请求,首先会发送options请求做预检,然后再发送真正的PUT/POST....请求，因此如果复杂请求是PUT等请求,则服务端需要设置允许某请求，如果复杂请求设置了请求头，则服务端需要设置允许某请求头
    简单请求：
        一次请求 
    非简单请求：
    两次请求，在发送数据之前会先发一次请求用于做“预检”，
    只有“预检”通过后才再发送一次请求用于数据传输。

JSONP和CORS：
1.JSONP只能实现GET请求，而CORS支持所有类型的HTTP请求
2.jsonp需要client和server端的相互配合
3.cors在client端无需设置，server端需要针对不同的请求，来做head头的处理

将dict转换成url的格式：使用urlencode

实现用户的登陆认证：
1.cookie session
2.token 登陆成功后生成加密字符串
3.JWT：json wed token缩写；它将用户信息加密到token中,服务器不保存任何用户信息，服务器通过使用保存的密钥来验证token的正确性
基于session认证机制存在以下问题：
    ​1）session信息存储在服务器端，如果登录用户过多，会占用过多服务器的空间；
    2）session依赖于cookie，session信息的标识保存在cookie中，如果cookie被截获，可能会造成 CSRF(跨站请求伪造攻击)；
    3）session认证不适合的分布式站点的应用场景。
JWT认证机制：
    1）对于jwt token的认证机制，在用户登录时，服务器会签发(生成)一个jwt token字符串；
    2）服务器在响应时将jwt token数据返回给客户端，客户端需保存jwt token数据；
    3）之后客户端在请求服务器时，如果需要进行用户的认证，需要将jwt token数据通过请求头传递给服务器，服务器会核验jwt token数据的有效性。
JWT token字符串组成：
    1）头部(header)：包含token类型和加密算法信息，使用base64编码生成字符串。
    2）载荷(payload)：保存有效的数据，通常还包含token的有效时间，使用base64编码生成字符串。
    3）签名(signature)：防止jwt token被伪造，由服务器在生成jwt token时，将header和payload内容拼接用.隔开，然后使用密钥加密生成。 签名有三部分组成，包括把头部、载荷、私钥（私钥是django项目一创建出来就出现在配置文件里的）再用base64编码，构成最终的jwt.
jwt认证的特点和使用：
​ 1）jwt token由服务器生成，交给客户端进行存储，不占用服务器的存储空间；
​ 2）适合于分布式站点的应用场景。
​ 3）使用时payload中不要存储敏感信息，因为这部分内容很容易被客户端解码。
​ 4）服务器端的密钥需要保存好，泄露密钥之后jwt token数据可以被随意伪造。
我们保存jwt,token在浏览器本地存储中,返回给前端，前端保存token。私钥是django项目一创建出来就出现在配置文件里的）再用base64编码，构成最终的jwt.

CSRF攻击的原理和防范措施：
    a)攻击原理：
        1.用户C访问正常网站A时进行登录，浏览器保存A的cookie
        2.用户C再访问攻击网站B，网站B上有某个隐藏的链接或者图片标签会自动请求网站A的URL地址,例如表单提交，传指定的参数
        3.而攻击网站B在访问网站A的时候，浏览器会自动带上网站A的cookie
        4.所以网站A在接收到请求之后可判断当前用户是登录状态，所以根据用户的权限做具体的操作逻辑，造成网站攻击成功
    b)防范措施：
        1.在请求头的里面添加一个随机值做为参数
        2.在响应的cookie里面也设置该随机值
        3.那么用户C在正常提交表单的时候会默认带上表单中的随机值，浏览器会自动带上cookie里面的随机值，那么服务器下次接受到请求之后就可以取出两个值进行校验
        4.而对于网站B来说网站B在提交表单的时候不知道该随机值是什么，所以就形成不了攻击，也可以用来设置避免表单的重复提交

django处理http过程
一个 HTTP 请求，首先被转成一个 HttpRequest对象，然后该对象被传递给Request中间件处理，如果该中间件返回了Response，则直接传递给 Response 中间件做收尾处理。否则的话 Request 中间件将访问 URL 配置，确定哪个 view 来处理，在确定了哪个 view 要执行，但是还没有执行该 view 的时候，系统会把 request 传递给view中间件处理器进行处理，如果该中间件返回了Response，那么该 Response 直接被传递给Response中间件进行后续处理，否则将执行确定的view函数处理并返回Response，在这个过程中如果引发了异常并抛出，会被 Exception 中间件处理器进行处理。

列举django orm 中所有的方法（QuerySet对象的所有方法）
all(): 查询所有结果
filter(**kwargs): 它包含了与所给筛选条件相匹配的对象。获取不到返回None
get(**kwargs): 返回与所给筛选条件相匹配的对象，返回结果有且只有一个。获取不到会抛异常如果符合筛选条件的对象超过一个或者没有都会抛出错误。
exclude(**kwargs): 它包含了与所给筛选条件不匹配的对象
order_by(*field): 对查询结果排序
reverse(): 对查询结果反向排序
count(): 返回数据库中匹配查询(QuerySet)的对象数量。
first(): 返回第一条记录
last(): 返回最后一条记录
exists(): 如果QuerySet包含数据，就返回True，否则返回False
values(*field): 返回一个ValueQuerySet——一个特殊的QuerySet，运行后得到的并不是一系 model的实例化对象，而是一个可迭代的字典序列 values_list(*field): 它与values()非常相似，它返回的是一个元组序列，values返回的是一个字典序列
distinct(): 从返回结果中剔除重复纪录

only和defer的区别？
only:从数据库中只取指定字段的内容 defer：指定字段的内容不被检索

select_related和prefetch_related的区别？
有外键存在时，可以很好的减少数据库请求的次数,提高性能
select_related通过多表join关联查询,一次性获得所有数据,只执行一次SQL查询
prefetch_related分别查询每个表,然后根据它们之间的关系进行处理,执行两次查询

filter和exclude的区别？
取到的值都是QuerySet对象,filter选择满足条件的,exclude:排除满足条件的.

Form作用：1.在前端生成HTML代码；2.对数据作有效性校验；3.返回校验信息并展示
ModeForm：根据模型类生成From组件,并且可以操作数据库

序列化：将Django中的模型类对象转换为JSON字符串
反序列化：将JSON字符串转换为Django中的模型类对象
使用序列化器进行反序列化时，需要对数据进行验证后，才能获取验证成功的数据或保存成模型类的对象；在获取反序列化数据前，必须用is_valid()方法进行验证

drf视图：
支持的定义属性：
    authentication_classes 列表或元祖，身份认证类；
    permissoin_classes 列表或元祖，权限检查类；
    throttle_classes 列表或元祖，流量控制类
GET（SELECT）：从服务器取出资源（一项或多项）。
POST（CREATE）：在服务器新建一个资源。
PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。
DELETE（DELETE）：从服务器删除资源。

Django框架的优化：
    前端：
        1.减少 http 请求，减少数据库的访问量.
        2.使用浏览器缓存，将一些常用的 css，js，logo 图标，这些静态资源缓存到本地浏览器，通过设置 http 头中的 cache-control 和 expires 的属性，可设定浏览器缓存，缓存时间可以自定义。
        3.对 html，css，javascript 文件进行压缩，减少网络的通信量。

Celery分布式任务队列：
情景：用户发起request，并等待response返回。
example：在某些views中，可能需要执行一段耗时的程序，那么用户就会等待很长时间，造成不好的用户体验。
解决：将耗时的程序放到 celery 中执行。
celery通过消息进行通信，通常使用一个叫Broker(中间人)来协client(任务的发出者)和worker(任务的处理者)。clients发出消息到队列中，broker将队列中的信息派发给worker来处理。
任务队列是一种跨线程、跨机器工作的一种机制。celery保存在redis里面
        
jQuery里通过id取值：
    $("#id").val()
    $("#id").attr(“value”)

Python中的三大框架：
    django：主要是用来快速开发的，他的亮点就是快速开发，节约成本
    flask：轻量级，主要是用来写接口的一个框架，实现前后端分离，提升开发效率，Flask 本身相当于一个内核，其他几乎所有的功能都要用到扩展，都需要用第三方的扩展来实现。
    Tornado：是一种 Web 服务器软件的开源版本。Tornado和现在的主流 Web 服务器框架有着明显的区别：它是非阻塞式服务器，而且速度相当快。

cookie和session的区别：
1、cookie数据存放在客户的浏览器上，session数据放在服务器上。
2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗
考虑到安全应当使用session。
3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能
考虑到减轻服务器性能方面，应当使用COOKIE。
4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。
cookie 和session 的联系：
session是通过cookie来工作的；
session和cookie之间是通过$_COOKIE['PHPSESSID']来联系的，通过$_COOKIE['PHPSESSID']可以知道session的id，从而获取到其他的信息。

nginx和uwsgi的区别和作用：
1, nginx是对外的服务器，外部浏览器通过url访问nginx, uwsgi是对内的服务器，主要用来处理动态请求。
2, nginx接收到浏览器发送过来的http请求，将包进行解析，分析url， a.如果是静态文件请求就直接访问用户给nginx配置的静态文件目录，直接返回用户请求的静态文件， b.如果不是静态文件，而是一个动态的请求，那么nginx就将请求转发给uwsgi,uwsgi接收到请求之后将包进行处理，处理成wsgi可以接受的格式，并发给wsgi,wsgi根据请求调用应用程序的某个文件，某个文件的某个函数，最后处理完将返回值再次交给wsgi,wsgi将返回值进行打包，打包成uwsgi能够接收的格式，uwsgi接收wsgi发送的请求，并转发给nginx,nginx最终将返回值返回给浏览器。

RESTful:一套编写接口的协议，协议规定如何编写以及如何设置返回值、状态码等信息。
    RESTful架构应该遵循统一接口原则，统一接口包含了一组受限的预定义的操作，不论什么样的资源，都是通过使用相同的接口进行资源的访问。
    接口应该使用标准的HTTP方法如GET，PUT和POST，并遵循这些方法的语义。
    如果按照HTTP方法的语义来暴露资源，那么接口将会拥有安全性和幂等性的特性，例如GET和HEAD请求都是安全的， 无论请求多少次，都不会改变服务器状态。而GET、HEAD、PUT和DELETE请求都是幂等的，无论对资源操作多少次， 结果总是一样的，后面的请求并不会产生比第一次更多的影响。
    最显著的特点：
        restful: 给用户一个url，根据method不同在后端做不同的处理，比如：post 创建数据、get获取数据、put和patch修改数据、delete删除数据。
        no rest: 给调用者很多url，每个url代表一个功能

nginx是如何实现高并发的：
    一个主进程，多个工作进程，每个工作进程可以处理多个请求
    每进来一个request，会有一个worker进程去处理。但不是全程的处理，处理到可能发生阻塞的地方，比如向上游（后端）服务器转发request，并等待请求返回。那么，这个处理的worker继续处理其他请求，而一旦上游服务器返回了，就会触发这个事件，worker才会来接手，这个request才会接着往下走。
    由于web server的工作性质决定了每个request的大部份生命都是在网络传输中，实际上花费在server机器上的时间片不多。这是几个进程就解决高并发的秘密所在。即@skoo所说的webserver刚好属于网络io密集型应用，不算是计算密集型。


git常用命令及其作用：
1）git init 初始化本地git仓库
2）git add . 将当前工作区的所有文件添加到暂存区
3）git commit -m “”将当前暂存区文件添加到本地仓库进行版本管理
4）git push 将本地仓库内容添加到远程仓库中
5）git pull 将远程仓库代码拉取到本地
6）git clone 拷贝远程仓库内容到本地